import GenCPP

GenCPP.generate_callwrapper_ipp('details/ThreadHandlerSetParams.ipp', """
template <typename NEW_HANDLER, {template}>
ThreadHandler<NEW_HANDLER> setParams({params}) const {
	ThreadHandler<NEW_HANDLER> th(bind(function_, {call}));
	th.setThreadIndex(thread_flags_);

	return th;
}
""", 5)
GenCPP.generate_callwrapper_ipp('details/ThreadHandlerOperator.ipp', """
template <{template}>
void operator() ({params}) const {
	function_({call});
}
""", 5)

GenCPP.generate_callwrapper_ipp('details/ThreadHandlerConstruct.ipp', """
explicit ThreadHandler(const function_type& func, {params}) : function_(func), params_({call}) {
	thread_flags_.resize(ThreadPool::Instance().numTaskQueue());
	setThreadIndex(Thread::getCurrentTid());
}
""", 5)
